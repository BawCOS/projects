#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
test <- getSnapshots(pitches)
n
n
n
n
n
test <- getSnapshots(pitches)
n
n
n
n
dim(snapshots[, 1:3, ])
dim(velocties)
apply(snapshots[, 7:9, ], c(1, 2), function(x) { length(x) })
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
Q
getSnapshots <- function(data, interval = 0.01) {
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#other <- names(data)[!(names(data) %in% parameters)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
#snapshots <- array(rep(c(arranged, recursive = TRUE), nplots), dim = c(dim(data), nplots))
#snapshots2 <- array(as.numeric(snapshots[,1:9,]), dim = c(dim(data)[2], 9, nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
#x <- matrices$x0 + matrices$vx0%*%t + .5*matrices$ax%*%t^2
#y <- pmax(1.417, matrices$y0 + smatrices$vy0%*%t + .5*matrices$ay%*%t^2)
#z <- matrices$z0 + matrices$vz0%*%t + .5*matrices$ax%*%t^2
#return(snapshots)
}
test <- getSnapshots(pitches)
n
n
n
n
n
dim(locations)
dim(test)
install.packages("abind")
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
browser()
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
test <- getSnapshots(pitches)
n
n
n
n
n
n
n
n
dim(test)
?data.frame
?as.data.frame
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshot[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
n
n
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
parameters <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
snapshots <- getSnapshots(parameters)
#for (i in idx)
#  snapshot[,i] <- as.numeric(snapshot[,i]) #parameters as numeric
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- snapshots[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
#' Produce time sequenced
#'
#' Pitch trajectories animated on a two-dimensional plot.
#'
#' Details to go here.
#'
#' @param data The nine PITCHf/x parameters used to determine the location of a pitch at a given time.
#' @param interval the amount of time between 'snapshots'
#' @return Return a three dimensinal array. The third dimension corresponds to different 'snapshots' of locations.
getSnapshots <- function(data, interval = 0.01) {
library(abind)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
parameters <- data[, c(idx)]
#arranged <- data[,c(parameters, other)] #rearrange columns for computation later on
for (i in idx)
parameters[,i] <- as.numeric(parameters[,i]) #Coerce the pitchFX parameters to numerics
times <- with(parameters[,c("y0", "vy0", "ay")], (-1*vy0-sqrt(vy0^2 - 2*ay*(y0 - 1.417)))/ay) #Figure out how long it takes each pitch to reach home plate
nplots <- ceiling(max(times/interval)) #Number of 'snapshots' required
t <- matrix(seq(from = 0, to = max(times), by = interval), ncol = 1)
npitches <- dim(parameters)[1]
snapshots <- array(rep(c(parameters, recursive = TRUE), nplots), dim = c(dim(parameters), nplots))
velocties <- array(apply(snapshots[,4:6,], c(1,2), function(x) { x*t }), dim = c(npitches, 3, nplots))
as <- array(apply(snapshots[,7:9,], c(1,2), function(x) { 0.5*x*t^2 }), dim = c(npitches, 3, nplots))
locations <- snapshots[,1:3,] + velocties + as
other <- data[, names(data)[!(names(data) %in% idx)]]
other.array <- array(rep(c(other, recursive = TRUE), nplots), dim = c(dim(other), nplots))
everything <- abind(locations, other.array, along = 2)
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in snapshots[,,3]) {
snapshot <- data.frame(i)
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
dim(snapshot)
dim(snapshots)
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
Q
animateFX <- function(data, layer=NULL, interval = 0.01, sleep = 0.000001){
#Add descriptions to pitch_types
if (!"pitch_type" %in% names(data)) warning("Make sure you have the appropriate 'pitch_type' column. If you don't have 'pitch_type', consider using ggFX()")
types <- cbind(pitch_type=c("SI", "FF", "IN", "SL", "CU", "CH", "FT", "FC", "PO", "KN", "FS", "FA", NA, "FO"),
pitch_types=c("Sinker", "Fastball (four-seam)", "Intentional Walk", "Slider", "Curveball", "Changeup",
"Fastball (two-seam)", "Fastball (cutter)", "Pitchout", "Knuckleball", "Fastball (split-finger)",
"Fastball", "Unknown", "Fastball ... (FO?)"))
pitchFX <- merge(data, types, by = "pitch_type")
if ("p_throws" %in% names(pitchFX)) pitchFX$p_throws <- paste("Pitcher Throws:", pitchFX$p_throws)
if ("stand" %in% names(pitchFX)) pitchFX$stand <- paste("Batter Stands:", pitchFX$stand)
idx <- c("x0", "y0", "z0", "vx0", "vy0", "vz0", "ax", "ay", "az")
if (!all(idx %in% names(pitchFX))) warning("You must have the following variables in your dataset to animate pitch locations: 'x0', 'y0', 'z0', 'vx0', 'vy0', 'vz0', 'ax', 'ay', 'az'")
complete <- pitchFX[complete.cases(pitchFX[,idx]),] #get rid of records with any missing parameters
#Keep parameters and other reasonable faceting/coloring variables
idx2 <- c("des", "type", "event", "zone", "stand", "batter_name", "p_throws", "pitcher_name", "pitch_types")
all.info <- complete[, names(pitchFX) %in% c(idx, idx2)]
snapshots <- getSnapshots(all.info)
browser()
for (i in dim(snapshots)[3]) {
snapshot <- data.frame(snapshots[,,i])
names(snapshot) <- c("x", "y", "z", idx2)
Sys.sleep(sleep)
print(ggplot()
+ layer(data = snapshot, mapping = aes(x=x, y=z, color=pitch_types, size=10*-y, alpha=0.5), geom = "point")
+ xlim(-3.5, 3.5) + xlab("Horizontal Pitch Location")
+ ylim(0, 10) + ylab("Height from Ground")
+ scale_size(guide="none") + scale_alpha(guide="none")
+ scale_color_brewer(palette="Set2") + layer)
}
#return(head(snapshot))
}
animateFX(pitches)
n
n
n
n
n
n
n
install.packages(c("bit", "bitops", "boot", "Cairo", "chron", "cluster", "colorspace", "digest", "ff", "forecast", "foreign", "gsubfn", "gWidgets", "httr", "igraph", "Matrix", "mgcv", "nlme", "parser", "Rcpp", "RcppArmadillo", "RCurl", "rgl", "RJSONIO", "rpart", "sets", "tseries", "websockets", "yaml", "zoo"))
library(Rcpp)
library(rggobi)
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
library(devtools)
## it takes a few minutes to install qtbase, but you do not need to reinstall it every time
install_github('qtbase', 'ggobi'); install_github('qtpaint', 'ggobi')
tools::vignetteEngine
?tools::vignetteEngine
str(vignetteEngine("Sweave"))
str(tools::vignetteEngine("Sweave"))
install.packages("tools")
str(tools::vignetteEngine("knitr"))
str(tools::vignetteEngine("knitr", package="pitchRx"))
install.packages("knitr")
library(knitr)
library("knitr")
?knit
opts_knit()
opts_knit$set()
opts_knit$set
library("ggplot2")
?ggplot
require(knitr)
?knit
install.packages("knitr")
library(knitr)
library("knitr")
update.packages(checkBuilt = TRUE)
path.package(knitr)
path.package("knitr")
?update.packages
?Vectorize
vrep <- Vectorize(rep.int)
vrep(1:4, 4:1)
vrep(times = 1:4, x = 4:1)
rep.int
?rep.int
vrep <- Vectorize(rep.int, "times")
vrep(times = 1:4, x = 42)
rep(42, 1:4)
?nls
require(graphics)
SS <- function(Vm, K, resp, conc) {
pred <- (Vm * conc)/(K + conc)
sum((resp - pred)^2 / pred)
}
vSS <- Vectorize(SS, c("Vm", "K"))
Treated <- subset(Puromycin, state == "treated")
Vm <- seq(140, 310, length.out = 50)
K <- seq(0, 0.15, length.out = 40)
SSvals <- outer(Vm, K, vSS, Treated$rate, Treated$conc)
contour(Vm, K, SSvals, levels = (1:10)^2, xlab = "Vm", ylab = "K")
?outer
str(SSvals)
?setAs
install.packages("tm")
library(tm)
library("topicmodels", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?Sys.setlocale
?DocumentTermMatrix
?log2
?tabulate
tabulate(c(2,3,5))
tabulate(c(2,3,3,5), nbins = 10)
seq_leng(10)
seq_len(10)
data(pitches)
library(pitchRx)
data(pitches)
head(pitches$zone)
qplot(pitches, px, pz, color=zone)
qplot(pitches, px, pz, color="zone")
qplot(pitches, x=px, y=pz, colour=zone)
qplot(data=pitches, x=px, y=pz, colour=zone)
qplot(data=pitches, x=as.numeric(px), y=as.numeric(pz), colour=zone)
qplot(data=pitches, x=as.numeric(px), y=as.numeric(pz), colour=zone)
qplot(data=pitches, x=as.numeric(px), y=as.numeric(pz), fill=zone)
qplot(data=pitches, x=as.numeric(px), y=as.numeric(pz), colour=zone)
??ave
?ave
ave(1:3)  # no grouping -> grand mean
attach(warpbreaks)
ave(breaks, wool)
breaks
wool
?unclass
par("din")[1]
library(ggplot2)
theme_get()
library(devtools)
install_github(c("assertthat", "testthat"))
install_github("ggvis", "rstudio")
install.packages("shiny")
install_github("ggvis", "rstudio")
library(ggvis)
# Basic scatter plot
ggvis(mtcars, props(x = ~ wt, y = ~ mpg),
mark_symbol()
)
data(mtcars)
library(ggvis)
# Basic scatter plot
ggvis(mtcars, props(x = ~ wt, y = ~ mpg),
mark_symbol()
)
ggvis(mtcars, props(x = ~ wt, y = ~ mpg),
mark_symbol(),
branch_smooth(
n = input_slider(2, 80, value = 5, step = 1, label = "Interpolation points"),
method = input_select(c("Linear" = "lm", "LOESS" = "loess"), label = "Method")
)
)
library(shiny)
runGitHub("shinyRGL", "cpsievert", subdir="inst/examples/scatterplot")
setwd("~/Desktop/github/local/cpsievert.github.com/projects/615/HW4")
library(dlm)
d = read.csv("dlm-data.csv")
d$date = as.Date(as.character(d$date), format="%m/%d/%y")
y = d$EHSR.25cm.T
y_tmp = y
y_tmp[1180] = mean(y[c(1179,1181)])
n = nrow(d)
de = decompose(ts(y_tmp, start=d$date[1], end=d$date[n], freq=24))
plot(de)
?fortify
?ggplot2fortify
?ggplot2::fortify
mod <- lm(mpg ~ wt, data = mtcars)
head(fortify(mod))
library(ggplot2)
mod <- lm(mpg ~ wt, data = mtcars)
head(fortify(mod))
head(fortify(mod, mtcars))
0:9082 - 0:0228
0.9082 - 0.0228
60-37.5
7+ 14+ 14+ 14+ 15+ 18+ 20+ 20+ 21+ 21+ 23
187//1
187/11
150000/175000
setwd("~/Dropbox/ISU/Teaching/Exam 1")
setwd("~/Dropbox/ISU/Teaching/Exam1")
class <- read.csv("scores_f13.csv")
class <- read.csv("scores_f13.csv", header=TRUE)
class <- read.csv("scores_f13.csv", header=TRUE)
paste(class$Exam1, collapse=", ")
1 < "2"
c(1, 1L, F)
setwd("~/Desktop/github/local/cpsievert.github.com/projects/615/HW4")
library(dlm)
d = read.csv("dlm-data.csv")
d$date = as.Date(as.character(d$date), format="%m/%d/%y")
y = d$EHSR.25cm.T
y_tmp = y
y_tmp[1180] = mean(y[c(1179,1181)])
n = nrow(d)
de = decompose(ts(y_tmp, start=d$date[1], end=d$date[n], freq=24))
plot(de)
install.packages(c("adabag", "BH", "bitops", "BMA", "bootstrap", "car", "caret", "chron", "class", "coin", "colorspace", "data.table", "directlabels", "DMwR", "dynamicTreeCut", "evaluate", "fda", "fdrtool", "fields", "flexmix", "forecast", "foreign", "GeneNet", "GGally", "glmnet", "gmp", "googleVis", "gridSVG", "gtools", "HSAUR", "HSAUR2", "iplots", "knitr", "lattice", "lme4", "longitudinal", "maps", "MASS", "Matrix", "mclust", "mgcv", "modeltools", "mosaic", "multcomp", "mvtnorm", "nlme", "nnet", "party", "plotrix", "png", "Quandl", "quantreg", "R2SWF", "RcppArmadillo", "Rd2roxygen", "RgoogleMaps", "rjags", "rjson", "rpart", "RWeka", "RWekajars", "seriation", "slam", "sp", "spam", "SparseM", "spatial", "splancs", "statmod", "topicmodels", "TSP", "tuneR", "vcd", "xts", "yaml"))
